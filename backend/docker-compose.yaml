
services:
  db:
    image: postgres:latest
    container_name: THANI_postdataQA
    build:
      context: ./
      dockerfile: /dockerfiles/Dockerfile.setup # use this dockerfile for db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: TEMP123
      POSTGRES_DB: EXPOS_THANI_WEB
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./var/lib/postgresql/import:/var/lib/postgresql/import
    networks:
      - shared_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: THANI_postdataQA_admin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@THANI.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5051:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - shared_network # maintain a shared network to ensure connections in between applications

  cli: # build cli, fails to launch but we can run docker exec -it THANI_cli /bin/bash to re-run (with interactive shell)
    build:
      context: ./
      dockerfile: NodeJS_CLI/Dockerfile.cli # uses this dockerfile for the CLI
    container_name: THANI_cli
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5434
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: EXPOS_THANI_WEB
    ports:
      - "5052:5050"
    networks:
      - shared_network
    stdin_open: true
    tty: true

networks:
  shared_network:
    name: custom_network